options mprint;
OPTIONS OBS=MAX;

%include "/PROJECTS/GENWORTH_2016/02_CODES/library.sas";
%include "/PROJECTS/GENWORTH_2016/02_CODES/common_macros.sas";

/***Creating log and lst reports for the code***/

/*proc printto print="/PROJECTS/GENWORTH_2016/02_CODES/PREPROCESS/LST/allvars_interim.lst"*/
/*log="/PROJECTS/GENWORTH_2016/02_CODES/PREPROCESS/LOGS/allvars_interim.log"  new; run;*/

/*** Change the WI and RI to full w/phased approval***/
PROC SORT DATA=RAW.RESPONSE_DATA NODUPKEY OUT=RESPONSE_DATA;
	BY PLCY_REF ROUND PHASE;
RUN;

PROC SORT DATA=RAW.WI_PHASED_PLCY_REF;
	BY PLCY_REF;
RUN;

DATA RESPONSE_DATA_WI;
	MERGE RESPONSE_DATA(IN=A) RAW.WI_PHASED_PLCY_REF(IN=B);
	BY PLCY_REF;

	IF A;
	IN_AB=CATT(A,B);
RUN;

DATA RESPONSE_DATA_WI(DROP=IN_AB);
	SET RESPONSE_DATA_WI;

	IF IN_AB=11 THEN
		IFA_GROUP_STATE_PROD="Full Approval w/ Phases";
RUN;

DATA PRED.RESPONSE_DATA_WI;
	SET RESPONSE_DATA_WI;

	IF STATE='RI' THEN
		IFA_GROUP_STATE_PROD = 'Full Approval w/ Phases';

	IF UPCASE(PRODUCT_DESC) = 'CA UNBUNDLED PARTNERSHIP' THEN
		IFA_GROUP_STATE_PROD = 'Full Approval w/ Phases';

	/***DELETING THE SPURIOUS NC POLICIES AND THE 6 PHASE POLICY WITH RARE RESULT AS PER THE CONFIRMATION FROM GENWORTH***/
	IF PLCY_REF IN ("452449","452450","368220","425656","444679","445664","480999", "481707") THEN
		DELETE;

	IF UPCASE(STATE)="NY" THEN
		DELETE;
RUN;
proc freq data=PRED.RESPONSE_DATA_WI;tables IFA_GROUP_STATE_PROD/missing;run;

/**Checking the number of unique policies***/
proc sort data=response_data_wi nodupkey out=unq_pol_initial;
	by plcy_ref;
run;

proc sort data=pred.response_data_wi nodupkey out=unq_pol;
	by plcy_ref;
run;

/**ROLLING UP STATIC POLICY DATA AT POLICY LEVEL***/
PROC SQL;
	CREATE TABLE POLICY AS
		SELECT COUNT(PLCY_REF) AS CNT_POL,CUST_REF,
			PLCY_REF,
			CLIENT_GENDER,
			PRIMARY_INSURED_FLAG,
			DOB_3,
			ISSUE_AGE,
			SHARED_POLICY,
			ORIG_APP_STATE,
			PREF_DISC,
			DERIVED_MARITAL_STATUS,
			IF_SPOUSE_DISC,
			IF_COUPLE_ISS_DISC,
			STATE_PARTNERSHIP,
			LIMITED_PAY,
			PAY_TERM,
			ALGT_FLAG

		FROM RAW.STATIC_POLICY_DATA
			GROUP BY PLCY_REF;
QUIT;


DATA POLICY_Y POLICY_N;
	SET POLICY;

	IF MISSING(SHARED_POLICY) AND CNT_POL=2 THEN
		SHARED_POLICY="Y";
	ELSE IF MISSING(SHARED_POLICY) AND CNT_POL=1 THEN
		SHARED_POLICY="N";
	IF SHARED_POLICY ="Y" THEN
		GENDER="S";
	ELSE IF SHARED_POLICY="N" THEN
		GENDER=CLIENT_GENDER;
	IF SHARED_POLICY ="Y" THEN
		OUTPUT POLICY_Y;
	ELSE IF SHARED_POLICY="N" THEN
		OUTPUT POLICY_N;
RUN;
/**CREATING PREF_DISC AS A MAX OF THE VALUES***/
DATA POLICY_Y;
SET POLICY_Y;
IF  UPCASE(PREF_DISC) ="Y" THEN PREF_DISC_Y =1;
ELSE  PREF_DISC_Y=0;
IF  UPCASE(PREF_DISC) ="S" THEN PREF_DISC_S =1;
ELSE PREF_DISC_S=0;
RUN;

PROC SQL;
CREATE TABLE POLICY_Y1 AS
SELECT MAX(PREF_DISC_Y) AS FIN_PREF_DISC_Y,MAX(PREF_DISC_S) AS FIN_PREF_DISC_S,PLCY_REF
FROM POLICY_Y
GROUP BY PLCY_REF;
RUN;
DATA POLICY_Y1;
SET POLICY_Y1;
FORMAT PREF_DISC_F $10.;
IF FIN_PREF_DISC_Y =1 THEN PREF_DISC_F = "Y";
ELSE IF FIN_PREF_DISC_S =1 THEN PREF_DISC_F ="S";
ELSE PREF_DISC_F = "N/MISSING";

RUN;
/**TO KEEP PRIMARY CUSTOMER AT  THE TOP***/
PROC SORT DATA=POLICY_Y ;
	BY PLCY_REF PRIMARY_INSURED_FLAG;
RUN;
PROC SORT DATA=POLICY_Y NODUPKEY OUT=POLICY_YND(DROP=PREF_DISC_Y PREF_DISC_S);
	BY PLCY_REF;
RUN;

PROC SQL;
CREATE TABLE POLICY_Y_FIN AS
SELECT A.*,B.PREF_DISC_F
FROM POLICY_YND A LEFT JOIN POLICY_Y1 B
ON A.PLCY_REF=B.PLCY_REF;
QUIT;

/**aDD THE PREF_DISC BY CREATING IND AND DOING A MAX***/
DATA POLICY_N;
SET POLICY_N;
FORMAT PREF_DISC_F $10.;
IF PREF_DISC ="Y" THEN PREF_DISC_F = "Y";
ELSE IF PREF_DISC ="S" THEN PREF_DISC_F ="S";
ELSE PREF_DISC_F = "N/MISSING";
RUN;


DATA STATIC_POLICY_DATA;
	SET POLICY_N
		POLICY_Y_FIN;
RUN;


PROC SORT DATA=PRED.RESPONSE_DATA_WI OUT=RESPONSE_DATA_WI_SORT;
	BY PLCY_REF;
RUN;



PROC SORT DATA=STATIC_POLICY_DATA NODUPKEY OUT=STATIC_POLICY_DATA1(DROP=ISSUE_AGE  PREF_DISC ORIG_APP_STATE 
	CLIENT_GENDER);
	BY PLCY_REF;
RUN;

DATA PRED.RESPONSE_STATIC;
	MERGE RESPONSE_DATA_WI_SORT(IN=A) STATIC_POLICY_DATA1(IN=B);
	BY PLCY_REF;

	IF A;
	IN_AB=CAT(A,B);
	if in_ab*1 < 10 then MISSING_RESPONSE_IND=1;
	else MISSING_RESPONSE_IND=0; 
	drop IN_AB;
RUN;



/**cHECKING THE MERGE PERCENTAGE***/



/***VARIABLE CREATION****/
/***175351 UNIQUE POLICIES AND 290349 OBSERVATIONS***/
/*CHANGING CONDITIONS IN TOTAL AMOUNT PAID,CLAIM_COUNT_CLOSED_IND,CLAIM_COUNT_NP_CLOSED_IND
ON 12072016-TS*/
DATA PRED.ALLVARS_INTERIM1207;
	SET PRED.RESPONSE_STATIC;

	/**cREATING THE AGE BIN ***/

	FORMAT AGE_BIN $50.;

	IF ISSUE_AGE LE 49 THEN
		AGE_BIN = "<49";
	ELSE IF 49<ISSUE_AGE <=52  THEN
		AGE_BIN ="49-52";
	ELSE IF 52<ISSUE_AGE <=54  THEN
		AGE_BIN ="52-54";
	ELSE IF 52<ISSUE_AGE <=56  THEN
		AGE_BIN ="54-56";
	ELSE IF 56<ISSUE_AGE <=58  THEN
		AGE_BIN ="56-58";
	ELSE IF 58<ISSUE_AGE <=60  THEN
		AGE_BIN ="58-60";
	ELSE IF 60<ISSUE_AGE <=62  THEN
		AGE_BIN ="60-62";
	ELSE IF 62<ISSUE_AGE <=66  THEN
		AGE_BIN ="62-66";
	ELSE IF 66<ISSUE_AGE   THEN
		AGE_BIN =">66";

	/**CREATING THE ROUND PHASE IND***/
	IF UPCASE(IFA_GROUP_STATE_PROD) = 'FULL APPROVAL W/ PHASES' OR UPCASE(IFA_GROUP_STATE_PROD) = 'FULL APPROVAL' THEN
		ROUND_PHASE_IND = 'PHASE';
	ELSE IF UPCASE(IFA_GROUP_STATE_PROD) = 'OTHER THAN FULL APPROVAL' THEN
		ROUND_PHASE_IND = 'ROUND';
	IF UPCASE(ROUND_PHASE_IND) = 'PHASE' THEN DECISION_STAGE = PHASE;
ELSE IF UPCASE(ROUND_PHASE_IND) = 'ROUND' THEN DECISION_STAGE = ROUND;

		/***DELETING POLICIES WITHOUT THE PRIMARY CUSTOMER***/
		IF PRIMARY_INSURED_FLAG = "S" THEN DELETE;
RUN;
/* CREATE LAG RESPONSE BY PLCY_REF AND ROUND/PHASE AND CREATE CUMULATIVE RATE INCREASE*/
DATA PRED.ALLVARS_INTERIM;
SET PRED.ALLVARS_INTERIM;
BY PLCY_REF ROUND_PHASE_IND;
RESPONSE_PRE = LAG(RESPONSE);
RATE_INCR_PRE=LAG(RATE_INCR);
IF LAG(RESPONSE) ="FPO" THEN CNT_FPO_PREV1 =1;
ELSE CNT_FPO_PREV1=0;
IF LAG(RESPONSE) ="RBO" THEN CNT_RBO_PREV1 =1;
ELSE CNT_RBO_PREV1=0;
IF FIRST.PLCY_REF AND FIRST.ROUND_PHASE_IND THEN DO;
CUM_RATE_INCR=0;
CNT_FPO_PREV1=0;
CNT_RBO_PREV1=0;
RESPONSE_PRE=.;
RATE_INCR_PRE =.;
END;
CUM_RATE_INCR+RATE_INCR;
RUN;


/**KBM DATA MERGE***/
/**Convert the pcly ref and customer ref into numbers and convert zip and p4 code into 
a single code for merge with summary credit table for a merge with the allvars data***/

DATA KBM_DATA;
SET RAW.KBM_DATA;
PLCY_REF1 = PLCY_REF*1;
DROP PLCY_REF;
RENAME PLCY_REF1=PLCY_REF;
CUST_REF1 = CUST_REF*1;
DROP CUST_REF;
RENAME CUST_REF1=CUST_REF;
FORMAT ZIP1 $5.;
ZIP1=SUBSTR(ZIP,1,5);

IF MISSING(P4) THEN P4=COMPRESS(SCAN(CLIENT_ZIP,2,'-'));
FORMAT ZP4_GCODE $30.;
ZP4_GCODE = compress(CAT(zip1,P4));
RUN;

/**Merging the KBM SUMMARY CREDIT WITH THE MAIN KBM DATA***/
/*Didnt get a 100% Match***/


PROC SORT DATA=RAW.KBM_SUMMCREDIT NODUPKEY OUT=KBM_CRED;BY ZP4_GCODE;RUN;
PROC SORT DATA=KBM_DATA ;BY ZP4_GCODE;RUN;

DATA KBM_CREDIT;
	MERGE KBM_DATA(IN=A) KBM_CRED(IN=S);
	BY ZP4_GCODE;

	IF A;
	IN_AS=CATT(A,S);
	if IN_AS = '10' then MISSING_CREDIT_IND=1;
	else MISSING_CREDIT_IND=0;
	drop IN_AS;
RUN;
proc sort data=kbm_credit; by ZIP1; run;

data kbm_zagg_data;
set ext.kbm_zagg_all_1607;
FORMAT ZIP1 $5.;
ZIP1=substr(ZIP,1,5);
drop ZIP;
run;
proc sort data=kbm_zagg_data; by ZIP1; run;

data all_kbm_combined;
merge work.kbm_credit(in=nz) work.kbm_zagg_data(in=z);
by ZIP1;
if nz;

if CATT(NZ,Z) = '10' then MISSING_ZAGG_IND=1;
else MISSING_ZAGG_IND=0;
run;

/**TO KEEP PRIMARY CUSTOMER AT  THE TOP***/
PROC SORT DATA=all_kbm_combined OUT=all_kbm_combined1;
	BY PLCY_REF PRIMARY_INSURED_FLAG;
RUN;

PROC SORT DATA=all_kbm_combined1 NODUPKEY OUT=all_kbm_combined1;
	BY PLCY_REF;
RUN;


/***Merging the above with the allvars interim file created ***/
PROC SORT DATA=PRED.allvars_interim out=RESPONSE_DATA(DROP= PRIMARY_INSURED_FLAG CUST_REF) ;
	BY PLCY_REF;
RUN;


DATA PRED.ALLVARS_STATIC_KBM1207;
	MERGE RESPONSE_DATA(IN=A) all_kbm_combined1(IN=K);
	BY PLCY_REF;

	IF A;
	IN_AK=CATT(A,K);
	if IN_AK='10' then MISSING_KBM_IND=1;
	else MISSING_KBM_IND=0;
	drop IN_AK;
RUN;


/****** DYNAMIC CLAIM COUNTS ********/

/* MERGE CLAIM DATA WITH RESPONSE DATA TO BRING IN CLAIM_START_DATE AND CLAIM_END_DATE */
PROC SQL;
CREATE TABLE CLAIM_DYNAMIC AS
SELECT A.*, B.SETUP_DATE, B.END_DATE,B.AMOUNT_PAID,B.STATUS_GROUP
FROM PRED.ALLVARS_STATIC_KBM AS A
LEFT JOIN
RAW.CLAIMS_DATA AS B
ON A.PLCY_REF = B.PLCY_REF;
QUIT;


/* SORT BY PLCY_REF EFF_DT AND SETUP_DATE */
PROC SORT DATA=CLAIM_DYNAMIC OUT=CLAIM_DYNAMIC_2;
BY PLCY_REF EFF_DT SETUP_DATE;
RUN;

/* ADD INDICATOR IF SETUP_DATE IS EARLIER THAN THE EFFECTIVE DATE AND OPEN ANC CLOSED CLAIMS*/
DATA CLAIM_DYNAMIC_3;
SET CLAIM_DYNAMIC_2;
IF SETUP_DATE =. THEN CLAIM_COUNT_IND = 0;
ELSE IF SETUP_DATE < EFF_DT THEN CLAIM_COUNT_IND = 1;
ELSE CLAIM_COUNT_IND = 0;
IF SETUP_DATE =. THEN CLAIM_COUNT_OPEN_IND = 0 ;
ELSE IF SETUP_DATE < EFF_DT AND UPCASE(STATUS_GROUP)="IN PAYMENT" THEN CLAIM_COUNT_OPEN_IND = 1;
ELSE CLAIM_COUNT_OPEN_IND = 0 ;
IF SETUP_DATE =. AND AMOUNT_PAID>0 THEN CLAIM_COUNT_CLOSED_IND = 0 ;
ELSE IF SETUP_DATE < EFF_DT AND UPCASE(STATUS_GROUP)="CLOSED" AND AMOUNT_PAID>0 THEN CLAIM_COUNT_CLOSED_IND = 1;
ELSE CLAIM_COUNT_CLOSED_IND = 0 ;
IF SETUP_DATE =. THEN CLAIM_COUNT_CONTACT_IND = 0 ;
ELSE IF SETUP_DATE < EFF_DT AND (UPCASE(STATUS_GROUP)="CLAIMS CONTACT" 
OR UPCASE(STATUS_GROUP)="PENDING") THEN CLAIM_COUNT_CONTACT_IND = 1;
ELSE CLAIM_COUNT_CONTACT_IND = 0 ;
IF SETUP_DATE < EFF_DT  THEN AMOUNT_PAID_IND = AMOUNT_PAID;
ELSE AMOUNT_PAID_IND = . ;
IF SETUP_DATE =. THEN CLAIM_COUNT_NP_CLOSED_IND = 0 ;
ELSE IF SETUP_DATE < EFF_DT AND (UPCASE(STATUS_GROUP)="CLOSED" AND (MISSING(AMOUNT_PAID)OR AMOUNT_PAID=0)) THEN CLAIM_COUNT_NP_CLOSED_IND = 1;
ELSE CLAIM_COUNT_NP_CLOSED_IND = 0 ;

RUN;



/*MAKE MISSING ZERO IN AMOUNT_PAID_IND*/
DATA CLAIM_DYNAMIC_3;
SET CLAIM_DYNAMIC_3;
IF AMOUNT_PAID_IND=. THEN AMOUNT_PAID_IND_MISS_ZERO=0;
ELSE AMOUNT_PAID_IND_MISS_ZERO=AMOUNT_PAID_IND;
RUN;

/* ROLL UP THE INDICATORS */
PROC SQL;
CREATE TABLE CLAIM_DYNAMIC_4 AS
SELECT PLCY_REF, EFF_DT, SUM(CLAIM_COUNT_IND) AS CLAIM_COUNT_DYNAMIC,
SUM(CLAIM_COUNT_OPEN_IND) AS CLAIM_COUNT_OPEN_DYNAMIC,
SUM(CLAIM_COUNT_CLOSED_IND) AS CLAIM_COUNT_CLOSED_DYNAMIC,
SUM(CLAIM_COUNT_NP_CLOSED_IND) AS CLAIM_COUNT_NP_CLOSED_DYNAMIC,
SUM(CLAIM_COUNT_CONTACT_IND) AS CLAIM_COUNT_CONTACT_DYNAMIC,
SUM(AMOUNT_PAID_IND_MISS_ZERO) AS TOTAL_AMOUNT_PAID
FROM CLAIM_DYNAMIC_3
GROUP BY PLCY_REF, EFF_DT;
RUN;
/*proc freq data=CLAIM_DYNAMIC_4;*/
/*table TOTAL_AMOUNT_PAID ;*/
/*run;*/

/* MERGE DYNAMIC CLAIM COUNT TO THE ALL_VARS */


PROC SQL;
CREATE TABLE PRED.ALLVARS_STATIC_KBM_CLAIMS1207 AS
SELECT A.*, B.CLAIM_COUNT_DYNAMIC,B.CLAIM_COUNT_OPEN_DYNAMIC,B.CLAIM_COUNT_CLOSED_DYNAMIC,
B.CLAIM_COUNT_CONTACT_DYNAMIC,B.TOTAL_AMOUNT_PAID,B.CLAIM_COUNT_NP_CLOSED_DYNAMIC
FROM PRED.ALLVARS_STATIC_KBM1207 AS A
LEFT JOIN 
CLAIM_DYNAMIC_4 AS B
ON A.PLCY_REF = B.PLCY_REF AND A.EFF_DT = B.EFF_DT;
quit;


/***Append Rate Increase Moving Average to the allvars_static_kbm_claims***/
PROC SORT DATA = PRED.ALLVARS_STATIC_KBM_CLAIMS1207 OUT = RATE_INCR_MA;
BY PLCY_REF ROUND_PHASE_IND DECISION_STAGE;
RUN;

PROC EXPAND DATA=RATE_INCR_MA OUT=RATE_INCR_MA_2;
ID DECISION_STAGE;
BY PLCY_REF ROUND_PHASE_IND;
CONVERT RATE_INCR = RATE_INCR_MA / TRANSFORMOUT=(MOVAVE 3);
RUN;

/** Create FINAL Allvars precap dataset **/
DATA PRED.ALLVARS_PRECAP;
SET RATE_INCR_MA_2;
RUN;

PROC FREQ DATA=PRED.ALLVARS_PRECAP;
	TABLES MISSING_RESPONSE_IND MISSING_CREDIT_IND MISSING_ZAGG_IND/missing;
RUN;

proc contents data=pred.allvars_precap varnum;
run;
PROC FREQ DATA=PRED.ALLVARS_PRECAP;
	TABLES RESPONSE/missing;
RUN;

DATA PRED.ALLVARS_PRECAP;
SET PRED.ALLVARS_PRECAP;
FORMAT RESPONSE1 $20.;

IF UPCASE(RESPONSE) ="FPO" THEN RESPONSE1 ="FULL PAY";
ELSE RESPONSE1 =RESPONSE;
 DROP RESPONSE;
 RENAME RESPONSE1=RESPONSE;
 IF UPCASE(RESPONSE_PRE) ="FPO" THEN RESPONSE2 ="FULL PAY";
ELSE RESPONSE2 =RESPONSE_PRE;
 DROP RESPONSE_PRE;
 RENAME RESPONSE2=RESPONSE_PRE;

 IF ESTINC30 = 'A' THEN HH_INCOME = 15000;
ELSE IF ESTINC30 = 'B' THEN HH_INCOME = 17500;
ELSE IF ESTINC30 = 'C' THEN HH_INCOME = 25000;
ELSE IF ESTINC30 = 'D' THEN HH_INCOME = 35000;
ELSE IF ESTINC30 = 'E' THEN HH_INCOME = 45000;
ELSE IF ESTINC30 = 'F' THEN HH_INCOME = 55000;
ELSE IF ESTINC30 = 'G' THEN HH_INCOME = 67500;
ELSE IF ESTINC30 = 'H' THEN HH_INCOME = 87500;
ELSE IF ESTINC30 = 'I' THEN HH_INCOME = 112500;
ELSE IF ESTINC30 = 'J' THEN HH_INCOME = 137500;
ELSE IF ESTINC30 = 'K' THEN HH_INCOME = 175000;
ELSE IF ESTINC30 = 'L' THEN HH_INCOME = 225000;
ELSE IF ESTINC30 = 'M' THEN HH_INCOME = 325000;
ELSE IF ESTINC30 = 'N' THEN HH_INCOME = 450000;
ELSE IF ESTINC30 = 'O' THEN HH_INCOME = 500000;

IF NETW30 = 'A' THEN NETW = 0;
ELSE IF NETW30 = 'B' THEN NETW = 2500;
ELSE IF NETW30 = 'C' THEN NETW = 15000;
ELSE IF NETW30 = 'D' THEN NETW = 37500;
ELSE IF NETW30 = 'E' THEN NETW = 62500;
ELSE IF NETW30 = 'F' THEN NETW = 87500;
ELSE IF NETW30 = 'G' THEN NETW = 125000;
ELSE IF NETW30 = 'H' THEN NETW = 200000;
ELSE IF NETW30 = 'I' THEN NETW = 312500;
ELSE IF NETW30 = 'J' THEN NETW = 438500;
ELSE IF NETW30 = 'K' THEN NETW = 625000;
ELSE IF NETW30 = 'L' THEN NETW = 875000;
ELSE IF NETW30 = 'M' THEN NETW = 1000000;

RATE_INCR_AFFORD = (ANNL_PREM_BFOR*RATE_INCR/100) / HH_INCOME;
IF NETW=0 THEN DO;
BENEFIT_POOL_ASSET_RATIO=0;
END;
ELSE DO;
IF BENE_TRM_AFTR=0 THEN DO;
BENEFIT_POOL_ASSET_RATIO = (ORIG_DBA_AFTR*(79-ISSUE_AGE)*365)/NETW;
END;
ELSE DO;
BENEFIT_POOL_ASSET_RATIO = (ORIG_DBA_AFTR*BENE_TRM_AFTR*365)/NETW;
END;
END;
POLICY_AGE_1 = (2016-YEAR(DOB_3)) - ISSUE_AGE;
POLICY_AGE_2 = YEAR(EFF_DT) - YEAR(IN_FORCE_DT);
POLICYHOLDER_AGE = 2016-YEAR(DOB_3);

PREM_PAID_TOT_1 = ANNL_PREM_BFOR*POLICY_AGE_1;
PREM_PAID_TOT_2 = ANNL_PREM_BFOR*POLICY_AGE_2;
IF substr(CRRT,1,1) = 'R' THEN RURAL_ROUTE = 'Y';
ELSE RURAL_ROUTE = 'N';
IF (UPCASE(N5059)="Y" OR 
UPCASE(N6064)="Y" OR UPCASE(N4049)="Y") AND 
(UPCASE(N3039) ="Y" OR UPCASE(N2029)="Y" OR 
UPCASE(N1819)="Y" )THEN FMLY_PRSNC="Y";
ELSE FMLY_PRSNC ="N";


RUN;

PROC SQL;
CREATE TABLE PRED.ALLVARS_PRECAP AS
SELECT A.*,B.*
FROM PRED.ALLVARS_PRECAP A LEFT JOIN  
EXT.ALL_DS_MODELS_SCORED B
ON A.PLCY_REF=B.PLCY_REF AND
A.CUST_REF =B.CUST_REF;
QUIT;


PROC CONTENTS DATA=EXT.ALL_DS_MODELS_SCORED;
RUN;

proc freq data=PRED.ALLVARS_PRECAP;
TABLE TOTAL_AMOUNT_PAID  CLAIM_COUNT_CLOSED_DYNAMIC CLAIM_COUNT_NP_CLOSED_DYNAMIC;
RUN;
